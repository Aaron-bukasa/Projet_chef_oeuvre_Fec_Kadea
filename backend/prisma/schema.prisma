generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// DEFINITION DES MODELES

// DEMANDE ET SUIVI DEMANDE

model Demande {
  id                Int         @id @default(autoincrement())
  requestId         String      @unique
  nom               String
  email             String      @unique
  telephone         String      @unique
  nom_organisation      String
  forme_juridique   String
  secteur_activite String
  province_activite String
  confirmed   Boolean @default(false)
  statut            String      @default("en attente")  // en attente, validée, rejetée
  date_soumission   DateTime    @default(now())
  suivi_demande  SuiviDemande[]
}

model SuiviDemande {
  id          Int       @id @default(autoincrement())
  requestId         String    @unique
  evenement   String
  date        DateTime  @default(now())
  demande     Demande   @relation(fields: [demandeRequestId], references: [requestId])
  demandeRequestId   String
}

// user, PROFIL, SUIVI ET CONFIRMATION

model User {
id       Int      @id @default(autoincrement())
requestId         String    @unique
nom      String
email    String @unique
password String
role                String      @default("user")  // administrateur, membre, user
verified    Boolean @default(false)
date_inscription    DateTime @default(now())
profil_user Profil?
suivi_user  SuiviUser[]
confirm_user   ConfirmationUser?
}

model Profil {
  id             Int      @id @default(autoincrement())
  requestId         String    @unique
  nom            String
  telephone      String   @unique
  avatar         String?
  bannere        String?
  adress         String?
  ville          String?
  date_adhesion  DateTime?
  date_expiration DateTime?
  status_adhesion String @default("inactif") // actif, inactif, bloquer
  user           User     @relation(fields: [userRequestId], references: [requestId])
  userRequestId         String      @unique
}

model SuiviUser {
id          Int       @id @default(autoincrement())
requestId         String    @unique
notifications   String
date        DateTime  @default(now())
user           User     @relation(fields: [userRequestId], references: [requestId])
userRequestId        String  @unique
}

model ConfirmationUser {
  id Int  @id @default(autoincrement())
  requestId         String    @unique
  code  String
  expiration DateTime
  user           User     @relation(fields: [userRequestId], references: [requestId])
  userRequestId        String  @unique
}


// NEWSLETTERS ET ABONNES

model NewsLetter {
  id          Int       @id @default(autoincrement())
  requestId         String    @unique
  objet       String
  newsletter  String
  date        DateTime  @default(now())
}

model Abonnement {
  id          Int       @id @default(autoincrement())
  requestId         String    @unique
  email    String
  date        DateTime  @default(now())
  confirmed Boolean @default(false)
}


// MESSAGE ET REPONSE

model Message {
  id          Int       @id @default(autoincrement())
  requestId         String    @unique
  nom     String
  email    String
  objet    String
  message    String
  read    Boolean @default(false)
  confirmed Boolean @default(false)
  date        DateTime  @default(now())
  reponse Boolean @default(false)
  message_reponse MessageReponse?
}

model MessageReponse {
  id          Int       @id @default(autoincrement())
  requestId         String    @unique
  objet     String
  reponse   String
  date        DateTime  @default(now())
  message     Message     @relation(fields: [messageRequestId], references: [requestId])
  messageRequestId       String  @unique
}


// RAPPORT

model Rapport {
  id                  Int         @id @default(autoincrement())
  requestId         String    @unique
  type                String      // adhésions, demandes, etc.
  date_generation     DateTime
  contenu             String
}

